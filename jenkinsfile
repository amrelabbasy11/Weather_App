pipeline {
    agent any

    environment {
        IMAGE_TAG = "latest-${BUILD_NUMBER}"
        IMAGE_NAME = "weather-image"
        DOCKER_REPO = "amrelabbasy"
    }

    stages {
        stage('Fetch Repo') {
            steps {
                git branch: 'main', credentialsId: 'github-token', url: 'https://github.com/amrelabbasy11/Weather_App.git'
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Push Image to Docker Hub') {
            steps {
                script {
                    sh '''
                        docker push ${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}
                        docker logout
                    '''
                }
            }
        }

        stage('Deploy Using Ansible') {
            steps {
                script {
                    sh ''' 
                        [ -f keys/private_key1 ] && chmod 600 keys/private_key1
                        [ -f keys/private_key2 ] && chmod 600 keys/private_key2
                        export ANSIBLE_HOST_KEY_CHECKING=False
                        ansible-playbook -i inventory playbook.yml || echo "Ansible Deployment Failed"
                    '''
                }
            }
        }
    }

    post {
        success {
            emailext (
                subject: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                    Great! The build succeeded! üöÄ
                    - Job Name: ${env.JOB_NAME}
                    - Build Number: ${env.BUILD_NUMBER}
                    - Build URL: ${env.BUILD_URL}
                    
                    Check the build here: ${env.BUILD_URL}
                """,
                to: 'amrelabbasy2003@gmail.com'
            )
        }
        failure {
            emailext (
                subject: "FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                    ‚ö†Ô∏è The build failed!
                    - Job Name: ${env.JOB_NAME}
                    - Build Number: ${env.BUILD_NUMBER}
                    - Build URL: ${env.BUILD_URL}
                    
                    Please check the logs here: ${env.BUILD_URL}
                """,
                to: 'amrelabbasy2003@gmail.com'
            )
        }
        always {
            emailext (
                subject: "Build Completed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                    The build has finished with status: ${currentBuild.currentResult}.
                    - Job Name: ${env.JOB_NAME}
                    - Build Number: ${env.BUILD_NUMBER}
                    - Build URL: ${env.BUILD_URL}
                    
                    Details: ${env.BUILD_URL}
                """,
                to: 'amrelabbasy2003@gmail.com'
            )
        }
    }
}
